!function(t){function n(n){for(var r,a,l=n[0],d=n[1],u=n[2],f=0,s=[];f<l.length;f++)a=l[f],o[a]&&s.push(o[a][0]),o[a]=0;for(r in d)Object.prototype.hasOwnProperty.call(d,r)&&(t[r]=d[r]);for(c&&c(n);s.length;)s.shift()();return i.push.apply(i,u||[]),e()}function e(){for(var t,n=0;n<i.length;n++){for(var e=i[n],r=!0,l=1;l<e.length;l++){var d=e[l];0!==o[d]&&(r=!1)}r&&(i.splice(n--,1),t=a(a.s=e[0]))}return t}var r={},o={0:0},i=[];function a(n){if(r[n])return r[n].exports;var e=r[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,a),e.l=!0,e.exports}a.m=t,a.c=r,a.d=function(t,n,e){a.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,n){if(1&n&&(t=a(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(a.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)a.d(e,r,function(n){return t[n]}.bind(null,r));return e},a.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(n,"a",n),n},a.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},a.p="";var l=window.webpackJsonp=window.webpackJsonp||[],d=l.push.bind(l);l.push=n,l=l.slice();for(var u=0;u<l.length;u++)n(l[u]);var c=d;i.push([3,1]),e()}({13:function(t,n,e){var r=e(14);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(2)(r,o);r.locals&&(t.exports=r.locals)},14:function(t,n,e){(t.exports=e(0)(!1)).push([t.i,".content {\n  margin-top: 50px;\n  max-width: 80%; }\n\n.middle-canvas {\n  border: 1px solid #cbcbcb;\n  width: 100%;\n  height: 300px;\n  background-color: #fcfcfc;\n  box-shadow: 0 0 2px 0 rgba(0, 0, 0, 0.3); }\n\n#myForm {\n  margin-top: 40px; }\n\n#textField {\n  width: 350px;\n  margin-left: auto;\n  margin-right: auto; }\n\n#btnField {\n  width: 300px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  justify-content: space-around; }\n\n#btnSend {\n  border: 1px solid red;\n  border-radius: 3px;\n  color: red;\n  width: 120px; }\n\n#btnClear {\n  border: 1px solid #cbcbcb;\n  border-radius: 3px;\n  color: #cbcbcb;\n  width: 120px; }\n",""])},3:function(t,n,e){"use strict";(function(t){e(5),e(13),e(15),t(document).ready(function(){var n=t("#myCanvas"),e=n[0].getContext("2d"),r=n.width(),o=n.height();n[0].height=o,n[0].width=r,e.textBaseline="top",e.strokeStyle="#000";var i=[],a=[];function l(){var n=t("#textInput").val();if(n){t("#textInput").val("");var r=Math.floor(d/50)+2;e.font="30px Arial";var o=e.measureText(n).width,a=Math.floor(271*Math.random()),l={timeIndex:r,x:screen.availWidth,y:a,speed:3,color:"rgb(255,0,0)",text:n,size:30,width:o,visible:!0,userInput:!0};i.push(l)}}t("#btnSend").click(l),t("#btnClear").click(function(){a=[]}),function(){for(var t=0;t<500;t++){var n=Math.floor(120*Math.random()),r=Math.floor(256*Math.random()),o=Math.floor(256*Math.random()),a=Math.floor(256*Math.random()),l=Math.floor(20*Math.random())+20;e.font=l+"px Arial";var d=e.measureText("Hello").width,u=Math.floor(3*Math.random())+2,c={timeIndex:n,x:screen.availWidth,y:Math.floor(Math.random()*(300-l+1)),speed:u,color:"rgb("+r+","+o+","+a+")",text:"Hello",size:l,width:d,visible:!0,userInput:!1};i.push(c)}}();var d=0;function u(){e.clearRect(0,0,r,o),e.save(),e.beginPath();var t=!0,n=!1,i=void 0;try{for(var l,d=a[Symbol.iterator]();!(t=(l=d.next()).done);t=!0){var u=l.value;u.visible&&(e.font=u.size+"px Arial",u.x-=u.speed,e.fillStyle=u.color,u.userInput&&(e.strokeStyle="#000",e.strokeRect(u.x,u.y,u.width,u.size)),e.fillText(u.text,u.x,u.y),u.x<=-u.width&&(u.visible=!1))}}catch(t){n=!0,i=t}finally{try{!t&&d.return&&d.return()}finally{if(n)throw i}}e.closePath(),e.restore()}window.onkeydown=function(t){if(13==t.keyCode)return l(),!1},window.onresize=function(){r=n.width(),o=n.height(),n[0].height=o,n[0].width=r,e.textBaseline="top",e.strokeStyle="#000",u()},window.setInterval(function(){var t=(d+=1)/50,n=i.filter(function(n){return n.timeIndex===t});a=a.concat(n),u()},20)})}).call(this,e(4))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,