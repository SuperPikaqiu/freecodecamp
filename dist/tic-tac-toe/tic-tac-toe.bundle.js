!function(n){function o(o){for(var t,a,d=o[0],l=o[1],u=o[2],f=0,s=[];f<d.length;f++)a=d[f],e[a]&&s.push(e[a][0]),e[a]=0;for(t in l)Object.prototype.hasOwnProperty.call(l,t)&&(n[t]=l[t]);for(c&&c(o);s.length;)s.shift()();return i.push.apply(i,u||[]),r()}function r(){for(var n,o=0;o<i.length;o++){for(var r=i[o],t=!0,d=1;d<r.length;d++){var l=r[d];0!==e[l]&&(t=!1)}t&&(i.splice(o--,1),n=a(a.s=r[0]))}return n}var t={},e={0:0},i=[];function a(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=n,a.c=t,a.d=function(n,o,r){a.o(n,o)||Object.defineProperty(n,o,{enumerable:!0,get:r})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,o){if(1&o&&(n=a(n)),8&o)return n;if(4&o&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&o&&"string"!=typeof n)for(var t in n)a.d(r,t,function(o){return n[o]}.bind(null,t));return r},a.n=function(n){var o=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(o,"a",o),o},a.o=function(n,o){return Object.prototype.hasOwnProperty.call(n,o)},a.p="";var d=window.webpackJsonp=window.webpackJsonp||[],l=d.push.bind(d);d.push=o,d=d.slice();for(var u=0;u<d.length;u++)o(d[u]);var c=l;i.push([4,1]),r()}({13:function(n,o,r){var t=r(14);"string"==typeof t&&(t=[[n.i,t,""]]);var e={hmr:!0,transform:void 0,insertInto:void 0};r(3)(t,e);t.locals&&(n.exports=t.locals)},14:function(n,o,r){(n.exports=r(1)(!1)).push([n.i,".box {\n  background-color: #000;\n  padding: 5px;\n  width: 500px;\n  height: 500px;\n  margin: 20px auto;\n  position: relative; }\n  .box ul {\n    list-style: none;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    align-content: center; }\n  .box li {\n    display: inline-block;\n    width: 160px;\n    height: 160px;\n    text-align: center;\n    line-height: 160px;\n    font-size: 30px;\n    color: #fff; }\n\n.right-bottom {\n  border-right: 2px solid #e1e100 !important;\n  border-bottom: 2px solid #e1e100 !important; }\n\n.bottom {\n  border-bottom: 2px solid #e1e100 !important; }\n\n.right {\n  border-right: 2px solid #e1e100 !important; }\n\n.modal-footer {\n  border-top: 0; }\n\n.choicePanel {\n  padding: 5px;\n  background-color: #000000; }\n  .choicePanel h2 {\n    color: #fff;\n    text-align: center; }\n  .choicePanel hr {\n    border-top: 2px solid #e1e100; }\n  .choicePanel span {\n    display: inline-block;\n    width: 100%;\n    color: #fff;\n    text-align: center;\n    margin-bottom: 15px; }\n\n#winCanvas {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1; }\n\n#roleSelect {\n  display: block;\n  width: 200px;\n  margin: 20px auto;\n  background-color: #00b3ee;\n  font-size: 24px;\n  color: white; }\n",""])},4:function(n,o,r){"use strict";(function(n){var o=function(){return function(n,o){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return function(n,o){var r=[],t=!0,e=!1,i=void 0;try{for(var a,d=n[Symbol.iterator]();!(t=(a=d.next()).done)&&(r.push(a.value),!o||r.length!==o);t=!0);}catch(n){e=!0,i=n}finally{try{!t&&d.return&&d.return()}finally{if(e)throw i}}return r}(n,o);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();r(5),r(13),r(15),r(16),n(document).ready(function(){var r={board:[],player:"",computer:"",status:"",pointArr:[[90,90],[250,90],[410,90],[90,250],[250,250],[410,250],[90,410],[250,410],[410,410]],timeIns:null};function t(){for(var n=!1,o=0;o<9;o++)if(void 0===r.board[o]){r.board[o]=r.computer;var t=i();if(t)return a(),d(t),void(r.status="finish");r.board[o]=void 0}for(o=0;o<9;o++)if(void 0===r.board[o]){if(r.board[o]=r.player,i()){r.board[o]=r.computer,n=!0;break}r.board[o]=void 0}if(!n)for(o=0;o<9;o++)if(void 0===r.board[o]){r.board[o]=r.computer;for(var u=0,c=0;c<9;c++)void 0===r.board[c]&&(r.board[c]=r.computer,i()&&u++,r.board[c]=void 0);if(u>=2){n=!0;break}r.board[o]=void 0}n||void 0===r.board[4]&&(r.board[4]=r.computer,n=!0);var f=[0,2,6,8];if(!n)for(o=0;o<f.length;o++)if(void 0===r.board[f[o]]){r.board[f[o]]=r.computer,n=!0;break}if(!n)for(o=0;o<9;o++)if(void 0===r.board[o]){r.board[o]=r.computer,n=!0;break}a(),e()?(r.status="finish",window.setTimeout(l,1e3)):r.status="player"}function e(){for(var n=0,o=0;o<9;o++)void 0!==r.board[o]&&n++;return 9==n}function i(){for(var n=0;n<3;n++)if(void 0!==r.board[3*n]&&r.board[3*n]==r.board[3*n+1]&&r.board[3*n+1]==r.board[3*n+2])return[3*n,3*n+2];for(n=0;n<3;n++)if(void 0!==r.board[n]&&r.board[n]==r.board[n+3]&&r.board[n+3]==r.board[n+6])return[n,n+6];return void 0!==r.board[0]&&r.board[0]==r.board[4]&&r.board[0]==r.board[8]?[0,8]:void 0!==r.board[2]&&r.board[2]==r.board[4]&&r.board[2]==r.board[6]&&[6,2]}function a(){for(var o=n("li"),t=0;t<9;t++)void 0!==r.board[t]?n(o[t]).text(r.board[t]):n(o[t]).text("")}function d(t){var e=0;n("#winCanvas").show(),r.timeIns=window.setInterval(function(){var n=document.getElementById("winCanvas").getContext("2d"),i=o(r.pointArr[t[0]],2),a=i[0],d=i[1],u=o(r.pointArr[t[1]],2),c=u[0],f=u[1];a==c&&(d-=40,f+=40),d==f&&(a-=40,c+=40),a<c&&d<f&&(a-=40,d-=40,c+=40,f+=40),a<c&&d>f&&(a-=40,d+=40,c+=40,f-=40),n.clearRect(0,0,500,500),n.strokeStyle="#ff6000",n.lineWidth=3,e%2==0&&(n.beginPath(),n.moveTo(a,d),n.lineTo(c,f),n.closePath(),n.stroke()),++e>=6&&l()},1e3)}function l(){r.board=[],null!=r.timeIns&&window.clearInterval(r.timeIns),r.timeIns=null,"X"==r.player?r.status="player":(r.status="computer",window.setTimeout(t,1e3)),n("#winCanvas").hide(),a()}n("li").on("click",function(){if("player"==r.status){var o=n(this).attr("id");if(void 0===r.board[o]){r.board[o]=r.player,a();var u=i();u?(d(u),r.status="finish"):e()?(r.status="finish",window.setTimeout(l,1e3)):(r.status="computer",window.setTimeout(t,1e3))}}}),n("#btnO").on("click",function(){r.player="O",r.computer="X",n("#myModal").modal("hide")}),n("#btnX").on("click",function(){r.player="X",r.computer="O",n("#myModal").modal("hide")}),n("#roleSelect").on("click",function(){null!=r.timeIns&&window.clearInterval(r.timeIns)}),n("#myModal").on("hidden.bs.modal",function(){l()}),n("#myModal").on("show.bs.modal",function(){r.status="modal"}),n("#myModal").modal({backdrop:"static"})})}).call(this,r(0))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,