!function(n){function t(t){for(var s,a,r=t[0],u=t[1],l=t[2],f=0,p=[];f<r.length;f++)a=r[f],i[a]&&p.push(i[a][0]),i[a]=0;for(s in u)Object.prototype.hasOwnProperty.call(u,s)&&(n[s]=u[s]);for(c&&c(t);p.length;)p.shift()();return o.push.apply(o,l||[]),e()}function e(){for(var n,t=0;t<o.length;t++){for(var e=o[t],s=!0,r=1;r<e.length;r++){var u=e[r];0!==i[u]&&(s=!1)}s&&(o.splice(t--,1),n=a(a.s=e[0]))}return n}var s={},i={0:0},o=[];function a(t){if(s[t])return s[t].exports;var e=s[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,a),e.l=!0,e.exports}a.m=n,a.c=s,a.d=function(n,t,e){a.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,t){if(1&t&&(n=a(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(a.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var s in n)a.d(e,s,function(t){return n[t]}.bind(null,s));return e},a.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(t,"a",t),t},a.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},a.p="";var r=window.webpackJsonp=window.webpackJsonp||[],u=r.push.bind(r);r.push=t,r=r.slice();for(var l=0;l<r.length;l++)t(r[l]);var c=u;o.push([3,1]),e()}({13:function(n,t,e){var s=e(14);"string"==typeof s&&(s=[[n.i,s,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(2)(s,i);s.locals&&(n.exports=s.locals)},14:function(n,t,e){(n.exports=e(0)(!1)).push([n.i,"body {\n  background-color: #3c3c3c;\n  color: white; }\n\n.content {\n  width: 700px;\n  margin: 50px auto; }\n\nh1 {\n  font-size: 80px;\n  text-align: center;\n  font-style: italic; }\n\n.button-field {\n  display: flex;\n  justify-content: center;\n  margin: 40px 0; }\n  .button-field > div {\n    width: 200px;\n    margin: 0 20px; }\n\n.title {\n  display: block;\n  text-align: center;\n  margin: 5px;\n  font-size: 16px; }\n\n.button-group {\n  display: flex;\n  justify-content: space-around; }\n  .button-group button {\n    background: 0;\n    border: 0;\n    font-size: 24px; }\n  .button-group span {\n    display: inline-block;\n    width: 60px;\n    font-size: 30px;\n    text-align: center; }\n\n.clock {\n  position: relative;\n  width: 350px;\n  height: 350px;\n  border: 2px solid #92d200;\n  border-radius: 50%;\n  margin: 10px auto;\n  display: flex;\n  flex-wrap: wrap;\n  align-content: center;\n  cursor: pointer; }\n  .clock span {\n    display: inline-block;\n    width: 100%;\n    text-align: center;\n    text-align: center;\n    font-size: 60px;\n    margin: 20px 0; }\n\n#time {\n  margin-top: 40px;\n  margin-bottom: 0; }\n\n#fillCanvas {\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  z-index: -1; }\n",""])},3:function(n,t,e){"use strict";(function(n){e(5),e(13),e(15),n(document).ready(function(){var t={break:5,session:25,timeCount:0,status:"sessionPause",timeIns:null,cxt:null};n("#breakAdd").on("click",function(){"sessionPause"!=t.status&&"breakPause"!=t.status||(t.break+=1,n("#breakText").text(t.break),"breakPause"==t.status&&(t.timeCount=0,n("#time").text(t.break)))}),n("#breakMinus").on("click",function(){"sessionPause"!=t.status&&"breakPause"!=t.status||t.break>1&&(t.break-=1,n("#breakText").text(t.break),"breakPause"==t.status&&(t.timeCount=0,n("#time").text(t.break)))}),n("#sessionAdd").on("click",function(){"sessionPause"==t.status&&(t.session+=1,t.timeCount=0,n("#sessionText").text(t.session),n("#time").text(t.session))}),n("#sessionMinus").on("click",function(){"sessionPause"==t.status&&t.session>1&&(t.session-=1,t.timeCount=0,n("#sessionText").text(t.session),n("#time").text(t.session))}),n("#clock").on("click",function(){var n="";switch(t.status){case"sessionRunning":n="sessionPause";break;case"sessionPause":n="sessionRunning";break;case"breakRunning":n="breakPause";break;case"breakPause":n="breakRunning"}t.status=n}),t.timeIns=window.setInterval(function(){"sessionPause"!=t.status&&"breakPause"!=t.status&&(t.timeCount++,"sessionRunning"==t.status?t.timeCount>60*t.session&&(t.status="breakRunning",t.timeCount=0,n("#status").text("Break!")):"breakRunning"==t.status&&t.timeCount>60*t.break&&(t.status="sessionRunning",t.timeCount=0,n("#status").text("Session")),function(){var e,s=t.timeCount;e="sessionRunning"==t.status||"sessionPause"==t.status?t.session:t.break;var i=60*e-s,o=Math.floor(i/3600),a=Math.floor((i-3600*o)/60),r=i%60;o>0&&a<10&&(a="0"+a);r<10&&(r="0"+r);var u=o>0?o+":"+a+":"+r:a+":"+r;n("#time").text(u),function(){if(null==t.cxt){var n=document.getElementById("fillCanvas");t.cxt=n.getContext("2d")}var e,s;"sessionRunning"==t.status||"sessionPause"==t.status?(e=60*t.session,s="#92d200"):(e=60*t.break,s="#ff3400");var i=((e-t.timeCount)/e).toFixed(2),o=Math.round(336*i),a=t.cxt;a.clearRect(0,0,350,350),a.fillStyle=s,a.beginPath(),a.arc(175,175,168,0,360),a.closePath(),a.fill(),a.fillStyle="#3c3c3c",a.fillRect(0,7,350,o)}()}())},1e3),n("#time").text(t.session)})}).call(this,e(4))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,